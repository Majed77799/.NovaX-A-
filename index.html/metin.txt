<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>NovaX AI — Effortless Conversations</title>

  <meta name="theme-color" content="#0b1833">
  <meta name="description" content="NovaX AI — Effortless Conversations. Powerful Outcomes.">
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(180deg, #0b1833, #1a0b2e);
      color: white;
      text-align: center;
      overflow-x: hidden;
    }
    header {
      padding: 20px;
      font-size: 14px;
      letter-spacing: 2px;
      color: #cfe1ff;
    }
    h1 {
      font-size: 2.5rem;
      margin: 0.5em 0 0.2em;
    }
    p.sub {
      font-size: 1.2rem;
      color: rgba(160,195,255,.9);
    }
    .stage {
      width: 300px;
      height: 300px;
      margin: 20px auto;
      border-radius: 50%;
      background: radial-gradient(circle at 30% 30%, #9cc2ff, #5d6cff);
      box-shadow: 0 0 50px rgba(92,108,255,0.6);
      animation: float 6s ease-in-out infinite;
    }
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-15px); }
    }
    .cards {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 16px;
      padding: 20px;
    }
    .card {
      backdrop-filter: blur(10px);
      background: rgba(255,255,255,0.08);
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 12px;
      padding: 16px;
      width: 250px;
      box-shadow: 0 8px 30px rgba(0,0,0,0.25);
    }
    .card h3 {
      margin: 0 0 8px;
      font-size: 16px;
    }
    .card p {
      margin: 0;
      font-size: 14px;
      color: #b9c2e6;
    }
    .cta {
      margin: 20px;
    }
    .btn {
      padding: 14px 28px;
      border-radius: 999px;
      border: 0;
      cursor: pointer;
      font-weight: bold;
      background: linear-gradient(90deg, #6aa7ff, #b26aff);
      color: #0b1026;
      font-size: 16px;
      box-shadow: 0 10px 40px rgba(127,160,255,.35);
    }
    footer {
      font-size: 12px;
      padding: 20px;
      color: #cfe1ff;
    }
    footer a {
      color: #cfe1ff;
      text-decoration: none;
      margin: 0 5px;
    }
    footer a:hover {
      text-decoration: underline;
    }
    .filter-bar {
      position: sticky;
      top: 0;
      z-index: 1000;
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      align-items: center;
      justify-content: center;
      padding: 12px 16px;
      background: rgba(11,24,51,0.88);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(255,255,255,0.15);
    }
    .filter-group {
      display: flex;
      align-items: center;
      gap: 8px;
      background: rgba(255,255,255,0.06);
      border: 1px solid rgba(255,255,255,0.15);
      border-radius: 999px;
      padding: 8px 12px;
      font-size: 12px;
      color: #cfe1ff;
    }
    .filter-group .options {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    .filter-group input[type="radio"],
    .filter-group input[type="checkbox"] {
      accent-color: #6aa7ff;
      cursor: pointer;
    }
    .select {
      background: transparent;
      color: #ffffff;
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 999px;
      padding: 6px 10px;
    }
    .badge {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 999px;
      background: rgba(255,255,255,0.08);
      border: 1px solid rgba(255,255,255,0.2);
      margin-right: 6px;
      font-size: 12px;
      color: #cfe1ff;
    }
    .meta {
      margin-top: 8px;
      font-size: 12px;
      color: #b9c2e6;
    }
  </style>
</head>
<body>
  <header>NovaX AI</header>

  <div class="filter-bar" id="filterBar">
    <div class="filter-group" id="timeframeGroup">
      <span>Timeframe</span>
      <div class="options">
        <label><input type="radio" name="timeframe" value="7d" checked> 7d</label>
        <label><input type="radio" name="timeframe" value="30d"> 30d</label>
        <label><input type="radio" name="timeframe" value="90d"> 90d</label>
      </div>
    </div>

    <div class="filter-group" id="regionGroup">
      <span>Region</span>
      <select class="select" id="regionSelect">
        <option value="global">Global</option>
        <option value="US">United States</option>
        <option value="GB">United Kingdom</option>
        <option value="CA">Canada</option>
        <option value="DE">Germany</option>
        <option value="FR">France</option>
        <option value="SA">Saudi Arabia</option>
        <option value="AE">United Arab Emirates</option>
        <option value="TR">Türkiye</option>
      </select>
    </div>

    <div class="filter-group" id="languageGroup">
      <span>Language</span>
      <div class="options">
        <label><input type="radio" name="language" value="en"> EN</label>
        <label><input type="radio" name="language" value="ar" checked> AR</label>
      </div>
    </div>

    <div class="filter-group" id="sourcesGroup">
      <span>Sources</span>
      <div class="options">
        <label><input type="checkbox" value="trends" checked> Trends</label>
        <label><input type="checkbox" value="etsy" checked> Etsy</label>
        <label><input type="checkbox" value="gumroad" checked> Gumroad</label>
        <label><input type="checkbox" value="reddit" checked> Reddit</label>
        <label><input type="checkbox" value="twitter" checked> Twitter</label>
      </div>
    </div>

    <div class="filter-group" id="predictionGroup">
      <label><input type="checkbox" id="togglePredictions" checked> Show predictions</label>
    </div>
  </div>

  <h1>Effortless Conversations</h1>
  <p class="sub">Powerful Outcomes.</p>

  <div class="stage"></div>

  <div id="resultsMeta" class="meta"></div>
  <div id="results" class="cards"></div>

  <div class="cta">
    <button class="btn">Get Started</button>
  </div>

  <footer>
    <a href="#">Privacy Policy</a> •
    <a href="#">Terms and Conditions</a>
  </footer>
  <script>
  (function(){
    const htmlEl = document.documentElement;
    const state = {
      timeframe: '7d',
      region: 'global',
      language: 'ar',
      sources: new Set(['trends','etsy','gumroad','reddit','twitter']),
      showPredictions: true
    };

    function daysToMs(days){ return days*24*60*60*1000; }
    const NOW = Date.now();

    const DATA_CACHE_KEY = 'mockDatasetV1';
    const CLIENT_THRESHOLD = 200;

    function generateMockDataset(){
      const items = [];
      const sources = ['trends','etsy','gumroad','reddit','twitter'];
      const countries = ['US','GB','CA','DE','FR','SA','AE','TR'];
      const languages = ['en','ar'];
      const total = 800;
      for(let i=0;i<total;i++){
        const daysAgo = Math.floor(Math.random()*90);
        const timestamp = NOW - daysToMs(daysAgo);
        const source = sources[Math.floor(Math.random()*sources.length)];
        const country = countries[Math.floor(Math.random()*countries.length)];
        const language = languages[Math.floor(Math.random()*languages.length)];
        const isPrediction = Math.random() < 0.25;
        const title = `${source.toUpperCase()} • Item ${i+1}`;
        items.push({ id: i+1, title, source, country, language, timestamp, isPrediction });
      }
      return items;
    }

    function loadDataset(){
      try {
        const raw = localStorage.getItem(DATA_CACHE_KEY);
        if(raw){
          const parsed = JSON.parse(raw);
          if(Array.isArray(parsed) && parsed.length) return parsed;
        }
      } catch(_){ }
      const generated = generateMockDataset();
      try { localStorage.setItem(DATA_CACHE_KEY, JSON.stringify(generated)); } catch(_){ }
      return generated;
    }

    let DATASET = loadDataset();

    function filterClient(filters){
      const cutoffMs = NOW - daysToMs(filters.timeframe === '7d' ? 7 : (filters.timeframe === '30d' ? 30 : 90));
      let results = DATASET.filter(item => item.timestamp >= cutoffMs);
      if(filters.region !== 'global'){
        results = results.filter(item => item.country === filters.region);
      }
      if(filters.language){
        results = results.filter(item => item.language === filters.language);
      }
      if(filters.sources && filters.sources.size){
        results = results.filter(item => filters.sources.has(item.source));
      }
      if(!filters.showPredictions){
        results = results.filter(item => !item.isPrediction);
      }
      return results;
    }

    async function queryServer(filters){
      return new Promise(resolve => {
        setTimeout(() => {
          const all = filterClient(filters);
          const limited = all.slice(0, CLIENT_THRESHOLD);
          resolve({ items: limited, total: all.length, usedServer: true });
        }, 300);
      });
    }

    const cache = new Map();
    function serializeFilters(f){
      return JSON.stringify({
        t: f.timeframe,
        r: f.region,
        l: f.language,
        s: [...f.sources].sort(),
        p: f.showPredictions
      });
    }

    function applyLanguage(lang){
      state.language = lang;
      if(lang === 'ar'){
        htmlEl.setAttribute('lang','ar');
        htmlEl.setAttribute('dir','rtl');
      } else {
        htmlEl.setAttribute('lang','en');
        htmlEl.setAttribute('dir','ltr');
      }
      const dict = lang === 'ar'
        ? { timeframe: 'الإطار الزمني', region: 'المنطقة', language: 'اللغة', sources: 'المصادر', showPredictions: 'إظهار التوقعات', global: 'عالمي', showing:'العناصر المعروضة', total:'الإجمالي', server:'خادم', client:'محلي' }
        : { timeframe: 'Timeframe', region: 'Region', language: 'Language', sources: 'Sources', showPredictions: 'Show predictions', global: 'Global', showing:'Showing', total:'total', server:'server', client:'client' };
      const tf = document.querySelector('#timeframeGroup span'); if(tf) tf.textContent = dict.timeframe;
      const rg = document.querySelector('#regionGroup span'); if(rg) rg.textContent = dict.region;
      const lg = document.querySelector('#languageGroup span'); if(lg) lg.textContent = dict.language;
      const sg = document.querySelector('#sourcesGroup span'); if(sg) sg.textContent = dict.sources;
      const pg = document.querySelector('#predictionGroup label'); if(pg) pg.lastChild.textContent = ' ' + dict.showPredictions;
      const globalOption = document.querySelector('#regionSelect option[value="global"]'); if(globalOption) globalOption.textContent = dict.global;
      applyLanguage.dict = dict;
    }

    function formatDate(ts){
      const d = new Date(ts);
      return d.toLocaleDateString(state.language === 'ar' ? 'ar' : 'en-US');
    }

    function render(items, meta){
      const container = document.getElementById('results');
      container.innerHTML = '';
      const fragment = document.createDocumentFragment();
      items.forEach(item => {
        const card = document.createElement('div');
        card.className = 'card';
        const h3 = document.createElement('h3');
        h3.textContent = item.title;
        const p = document.createElement('p');
        p.className = 'meta';
        const pred = item.isPrediction ? ' • 🔮' : '';
        p.textContent = `${item.source} • ${item.country} • ${item.language.toUpperCase()} • ${formatDate(item.timestamp)}${pred}`;
        card.appendChild(h3);
        card.appendChild(p);
        fragment.appendChild(card);
      });
      container.appendChild(fragment);
      const metaEl = document.getElementById('resultsMeta');
      const sourcesList = [...state.sources].join(', ');
      const dict = applyLanguage.dict || { showing:'Showing', total:'total', server:'server', client:'client' };
      const mode = meta.usedServer ? dict.server : dict.client;
      metaEl.textContent = `${dict.showing} ${items.length} / ${meta.total} (${mode}) • ${state.timeframe} • ${state.region} • ${state.language.toUpperCase()} • [${sourcesList}] ${state.showPredictions ? '🔮' : ''}`;
    }

    async function refresh(){
      const key = serializeFilters(state);
      if(cache.has(key)){
        const cached = cache.get(key);
        render(cached.items, { total: cached.total, usedServer: cached.usedServer });
        return;
      }
      const roughAll = filterClient({ ...state, showPredictions: true });
      if(roughAll.length > CLIENT_THRESHOLD){
        const res = await queryServer(state);
        cache.set(key, res);
        render(res.items, { total: res.total, usedServer: true });
        return;
      }
      const client = filterClient(state);
      const payload = { items: client, total: client.length, usedServer: false };
      cache.set(key, payload);
      render(client, { total: client.length, usedServer: false });
    }

    document.querySelectorAll('input[name="timeframe"]').forEach(el => el.addEventListener('change', e => { state.timeframe = e.target.value; refresh(); }));
    document.getElementById('regionSelect').addEventListener('change', e => { state.region = e.target.value; refresh(); });
    document.querySelectorAll('input[name="language"]').forEach(el => el.addEventListener('change', e => { applyLanguage(e.target.value); refresh(); }));
    document.querySelectorAll('#sourcesGroup input[type="checkbox"]').forEach(chk => {
      chk.addEventListener('change', e => {
        const val = e.target.value;
        if(e.target.checked){ state.sources.add(val); } else { state.sources.delete(val); }
        refresh();
      });
    });
    document.getElementById('togglePredictions').addEventListener('change', e => { state.showPredictions = e.target.checked; refresh(); });

    const tfChecked = document.querySelector('input[name="timeframe"]:checked'); if(tfChecked) state.timeframe = tfChecked.value;
    state.region = document.getElementById('regionSelect').value;
    const langChecked = document.querySelector('input[name="language"]:checked'); if(langChecked) state.language = langChecked.value; applyLanguage(state.language);
    document.querySelectorAll('#sourcesGroup input[type="checkbox"]').forEach(chk => { if(chk.checked) state.sources.add(chk.value); else state.sources.delete(chk.value); });
    state.showPredictions = document.getElementById('togglePredictions').checked;

    refresh();
  })();
  </script>
</body>
</html>
